[
    {
        "id": "999bb9ea6adf3de8",
        "type": "tab",
        "label": "Hardy Barth Ladepunkt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "362a0f5c4557595e",
        "type": "group",
        "z": "999bb9ea6adf3de8",
        "name": "WRITE",
        "style": {
            "label": true,
            "stroke": "#ff0000"
        },
        "nodes": [
            "04d1c7bccdc4cfc8",
            "b5039f4e5faa6658",
            "d2ab49cd7a547869",
            "37dbadd621a56daf",
            "949e25d8fe6b072c",
            "7c1994c2e7b85d71",
            "868232f184e3f0f8",
            "bf938d0bc2104528",
            "c6eb58c588c0ad76",
            "ca4b627766cbf3c1",
            "989eb95978ddba44"
        ],
        "x": 34,
        "y": 159,
        "w": 1152,
        "h": 388
    },
    {
        "id": "4f9626bf34d93efb",
        "type": "group",
        "z": "999bb9ea6adf3de8",
        "name": "READ",
        "style": {
            "label": true
        },
        "nodes": [
            "4a056df9a0813578",
            "c4b49b26f61160f1",
            "667601978fcbee32",
            "8f6413604769bda0",
            "5ba74433570b1693"
        ],
        "x": 48,
        "y": 579,
        "w": 838,
        "h": 268
    },
    {
        "id": "c6eb58c588c0ad76",
        "type": "group",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "Einmalig",
        "style": {
            "label": true
        },
        "nodes": [
            "9c2cb4ef21ba2250",
            "5e0341b80186b32f"
        ],
        "x": 74,
        "y": 339,
        "w": 452,
        "h": 82
    },
    {
        "id": "ca4b627766cbf3c1",
        "type": "group",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "Util",
        "style": {
            "label": true
        },
        "nodes": [
            "e9145bcc48f1fa04",
            "2cc7940de8ef9401"
        ],
        "x": 74,
        "y": 439,
        "w": 352,
        "h": 82
    },
    {
        "id": "5ba74433570b1693",
        "type": "group",
        "z": "999bb9ea6adf3de8",
        "g": "4f9626bf34d93efb",
        "name": "Test ob die Standardwerte korrekt geschrieben werden",
        "style": {
            "label": true
        },
        "nodes": [
            "8b4fedfd403ed117",
            "931c8bddc81bbccd",
            "76d93db6ca65eae0",
            "4d1b9f20f495755c"
        ],
        "x": 74,
        "y": 679,
        "w": 682,
        "h": 142
    },
    {
        "id": "dcd1bddb57723ab6",
        "type": "comment",
        "z": "999bb9ea6adf3de8",
        "name": "API Quelle",
        "info": "http://apidoc.ecb1.de/#!/measuring/post_meters_id\n\nhttp://ecb1.local/api/doc\n\n\n# lgwb  Saldo Active power+/- <= aktuelle Leistung \"-5.6\"\n# 1-0:1.4.0   Active power+  <= aktuelle Leistung \"5.6\"\n# 1-0:1.8.0   Active energy+ <= Zähler Arbeit/Energie \"8.7731999999999988\"\n# 1-0:2.4.0   Active power- <= aktuelle Leistung \"0.0\"\n# 1-0:2.8.0   Active energy- <= Zähler Arbeit/Energie \"0.0\"\n# 1-0:13.4.0  Power factor \"0.866\"\n# 1-0:21.4.0  Active power+ (L1) \"5.6\"\n# 1-0:21.8.0  Active energy+ (L1) \"8.7731999999999988\"\n# 1-0:22.4.0  Active power- (L1) \"0.0\"\n# 1-0:22.8.0  Active energy- (L1) \"0.0\"\n# 1-0:31.4.0  Current (L1) \"0.027999999999999994\"\n# 1-0:32.4.0  Voltage (L1) \"226.914\"\n# 1-0:33.4.0  Power factor (L1) \"0.866\"\n# 1-0:41.4.0  Active power+ (L2) \"0.0\"\n# 1-0:41.8.0  Active energy+ (L2) \"0.0\"\n# 1-0:42.4.0  Active power- (L2) \"0.0\"\n# 1-0:42.8.0  Active energy- (L2) \"0.0\"\n# 1-0:51.4.0  Current (L2) \"0.0\"\n# 1-0:52.4.0  Voltage (L2) \"227.55900000000009\"\n# 1-0:53.4.0  Power factor (L2) \"0.0\"\n# 1-0:61.4.0  Active power+ (L3) \"0.0\"\n# 1-0:61.8.0  Active energy+ (L3) \"0.0\"\n# 1-0:62.4.0  Active power- (L3) \"0.0\"\n# 1-0:62.8.0  Active energy- (L3) \"0.0\"\n# 1-0:71.4.0  Current (L3) \"0.0\"\n# 1-0:72.4.0  Voltage (L3) \"226.546\"\n# 1-0:73.4.0  Power factor (L3) \"0.0\"\n\n\nBeispiel Antwort:\n{\n\t\"meter\": {\n\t\t\"function\": \"socket\",\n\t\t\"type\": \"eCB1 intern\",\n\t\t\"ipaddress\": \"127.0.0.1\",\n\t\t\"vendor\": \"eCHARGE\",\n\t\t\"serial\": \"(DEINE SERIENNUMMER)\",\n\t\t\"id\": 1,\n\t\t\"data\": {\n\t\t\t\"1-0:22.4.0\": 0.0,\n\t\t\t\"1-0:73.4.0\": 0.0,\n\t\t\t\"1-0:51.4.0\": 0.0,\n\t\t\t\"1-0:62.4.0\": 0.0,\n\t\t\t\"1-0:41.4.0\": 0.0,\n\t\t\t\"1-0:72.4.0\": 226.973,\n\t\t\t\"1-0:42.4.0\": 0.0,\n\t\t\t\"1-0:42.8.0\": 0.0,\n\t\t\t\"1-0:2.4.0\": 0.0,\n\t\t\t\"1-0:62.8.0\": 0.0,\n\t\t\t\"1-0:53.4.0\": 0.0,\n\t\t\t\"1-0:41.8.0\": 0.0,\n\t\t\t\"1-0:1.8.0\": 8.7715,\n\t\t\t\"1-0:61.8.0\": 0.0,\n\t\t\t\"1-0:2.8.0\": 0.0,\n\t\t\t\"lgwb\": -5.0,\n\t\t\t\"1-0:21.8.0\": 8.7715,\n\t\t\t\"1-0:52.4.0\": 228.037,\n\t\t\t\"1-0:31.4.0\": 0.025,\n\t\t\t\"1-0:61.4.0\": 0.0,\n\t\t\t\"1-0:71.4.0\": 0.0,\n\t\t\t\"1-0:21.4.0\": 5.0,\n\t\t\t\"1-0:33.4.0\": 0.858,\n\t\t\t\"1-0:13.4.0\": 0.858,\n\t\t\t\"1-0:22.8.0\": 0.0,\n\t\t\t\"1-0:1.4.0\": 5.0,\n\t\t\t\"1-0:32.4.0\": 227.321\n\t\t},\n\t\t\"name\": \"Carport\"\n\t},\n\t\"protocol-version\": \"1.4\"\n}",
        "x": 100,
        "y": 60,
        "wires": []
    },
    {
        "id": "04d1c7bccdc4cfc8",
        "type": "template",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "Saldo Active power+/-",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.meter.data.lgwb}}",
        "output": "str",
        "x": 520,
        "y": 240,
        "wires": [
            [
                "d2ab49cd7a547869",
                "868232f184e3f0f8"
            ]
        ]
    },
    {
        "id": "b5039f4e5faa6658",
        "type": "inject",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "989eb95978ddba44"
            ]
        ]
    },
    {
        "id": "d2ab49cd7a547869",
        "type": "debug",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "template power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 200,
        "wires": []
    },
    {
        "id": "37dbadd621a56daf",
        "type": "debug",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "http request",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 200,
        "wires": []
    },
    {
        "id": "949e25d8fe6b072c",
        "type": "inject",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "Mock http Answer",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"protocol-version\":\"1.3\",\"meter\":{\"name\":\"Ladepunkt1\",\"ipaddress\":\"127.0.0.1\",\"serial\":12345678,\"function\":\"socket\",\"id\":1,\"vendor\":\"eCHARGE\",\"data\":{\"lgwb\":-3996.6,\"1-0:1.4.0\":3996.6,\"1-0:41.8.0\":2267.0523,\"1-0:72.4.0\":229.47099999999995,\"1-0:61.8.0\":2253.8956,\"1-0:31.4.0\":5.905,\"1-0:53.4.0\":0.9940000000000001,\"1-0:51.4.0\":5.831,\"1-0:73.4.0\":0.995,\"1-0:1.8.0\":7511.7381,\"1-0:21.4.0\":1339,\"1-0:52.4.0\":228.062,\"1-0:2.4.0\":0,\"1-0:33.4.0\":0.9940000000000001,\"1-0:42.8.0\":0.0019,\"1-0:71.4.0\":5.862,\"1-0:62.4.0\":0,\"1-0:22.8.0\":0.0571,\"1-0:62.8.0\":0,\"1-0:61.4.0\":1336.7,\"1-0:32.4.0\":228.456,\"1-0:22.4.0\":0,\"1-0:21.8.0\":2990.8487,\"1-0:42.4.0\":0,\"1-0:41.4.0\":1320.8,\"1-0:2.8.0\":0,\"1-0:13.4.0\":0.9940000000000001},\"type\":\"eCB1 intern\"}}",
        "payloadType": "json",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "04d1c7bccdc4cfc8"
            ]
        ]
    },
    {
        "id": "cf04d35c23d684fe",
        "type": "modbus-server",
        "z": "999bb9ea6adf3de8",
        "name": "GEN24 Modbus Server",
        "logEnabled": true,
        "hostname": "0.0.0.0",
        "serverPort": "502",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": 10000,
        "holdingBufferSize": "40000",
        "inputBufferSize": 10000,
        "discreteBufferSize": 10000,
        "showErrors": true,
        "x": 310,
        "y": 80,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "9c2cb4ef21ba2250",
        "type": "function",
        "z": "999bb9ea6adf3de8",
        "g": "c6eb58c588c0ad76",
        "name": "Write Registers",
        "func": "const registers = [40000, 40001, 40002, 40003, 40004, 40005, 40006, 40007, 40008, 40009,\n    40010, 40011, 40012, 40013, 40014, 40015, 40016, 40017, 40018, 40019,\n    40020, 40021, 40022, 40023, 40024, 40025, 40026, 40027, 40028, 40029,\n    40030, 40031, 40032, 40033, 40034, 40035, 40036, 40037, 40038, 40039,\n    40040, 40041, 40042, 40043, 40044, 40045, 40046, 40047, 40048, 40049,\n    40050, 40051, 40052, 40053, 40054, 40055, 40056, 40057, 40058, 40059,\n    40060, 40061, 40062, 40063, 40064, 40065, 40066, 40067, 40068, 40069,\n    40070, 40071, 40072, 40073, 40074, 40075, 40076, 40077, 40078, 40079,\n    40080, 40081, 40082, 40083, 40084, 40085, 40086, 40087, 40088, 40089,\n    40090, 40091, 40092, 40093, 40094, 40095, 40096, 40097, 40098, 40099,\n    40100, 40101, 40102, 40103, 40104, 40105, 40106, 40107, 40108, 40109,\n    40110, 40111, 40112, 40113, 40114, 40115, 40116, 40117, 40118, 40119,\n    40120, 40121, 40122, 40123, 40124, 40125, 40126, 40127, 40128, 40129,\n    40130, 40131, 40132, 40133, 40134, 40135, 40136, 40137, 40138, 40139,\n    40140, 40141, 40142, 40143, 40144, 40145, 40146, 40147, 40148, 40149,\n    40150, 40151, 40152, 40153, 40154, 40155, 40156, 40157, 40158, 40159,\n    40160, 40161, 40162, 40163, 40164, 40165, 40166, 40167, 40168, 40169,\n    40170, 40171, 40172, 40173, 40174, 40175, 40176, 40177, 40178, 40179,\n    40180, 40181, 40182, 40183, 40184, 40185, 40186, 40187, 40188, 40189,\n    40190, 40191, 40192, 40193, 40194, 40195, 40196, 40197 ];\n\n\nconst values = [\n    //SunSpec Modbus Map = 0x53756e53 ('SunS')\n    21365, 28243, \n    //SunSpec Common Model block = \"1\"\n    1, \n    //Length of Common Model block = \"65\"\n    65, \n    //Manufacturer = \"Fronius\"\n    18034, 28526, 26997, 29440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    //Device model\n    21357, 24946, 29728, 19813, 29797, 29216, 21587, 8246, 13633, 11571, 0, 0, 0, 0, 0, 0, \n    //Options = \"<primary>\"\"\n    15472, 29289, 28001, 29305, 15872, 0, 0, 0, \n    //SW version of meter = \"1.3\"\n    12590, 13056, 0, 0, 0, 0, 0, 0, \n    //Serialnumber of the meter = \"2242372340\"\n    13111, 13111, 13111, 12851, 13360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    //Modbus Device Address\n    204, \n    // SunSpec Meter Modbus Map (float); 211: single phase, 212: split phase, 213: three phase\n    213,\n    //Length of inverter model block = 124\n    124, \n\n    //Smart Meter Data >>>\n    //AC Total Current value\n    0, 0, \n    //AC Phase-A Current value\n    0, 0, \n    //AC Phase-B Current value\n    0, 0, \n    //AC Phase-C Current value\n    0, 0, \n    //AC Voltage Average Phase-to-neutral value\n    0, 0, \n    //AC Voltage Phase-A-to-neutral value\n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0,\n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0, 0, \n    0,\n    //<<< Smart Meter Data\n\n    //Identifies this as End block = 0xFFFF\n    65535, \n    //Length of model block = 0\n    0 ]\n\nconst reg1 = registers.map(reg => reg)\nconst reg2 = reg1.splice(100)\nconst values2 = values.splice(100)\n\nconst p1 = {\n    'value': values,\n    'fc': 16,\n    'unitid': 3,\n    'address': reg1,\n    'quantity': values.length\n}\nconst p2 = {\n    'value': values2,\n    'fc': 16,\n    'unitid': 3,\n    'address': reg2,\n    'quantity': values2.length\n}\n\nnode.send({ payload: p1 })\nnode.send({ payload: p2 })",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 380,
        "wires": [
            [
                "7c1994c2e7b85d71"
            ]
        ]
    },
    {
        "id": "5e0341b80186b32f",
        "type": "inject",
        "z": "999bb9ea6adf3de8",
        "g": "c6eb58c588c0ad76",
        "name": "Write Modbus Data",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 210,
        "y": 380,
        "wires": [
            [
                "9c2cb4ef21ba2250"
            ]
        ]
    },
    {
        "id": "e9145bcc48f1fa04",
        "type": "inject",
        "z": "999bb9ea6adf3de8",
        "g": "ca4b627766cbf3c1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "2cc7940de8ef9401"
            ]
        ]
    },
    {
        "id": "2cc7940de8ef9401",
        "type": "function",
        "z": "999bb9ea6adf3de8",
        "g": "ca4b627766cbf3c1",
        "name": "Clear headers",
        "func": "\nconst ninetyNineZeros = []\nninetyNineZeros.length = 99\nninetyNineZeros.fill(0)\n\nconst p1 = {\n    'value': ninetyNineZeros,\n    'fc': 16,\n    'unitid': 3,\n    'address': 0,\n    'quantity': ninetyNineZeros.length\n}\nconst p2 = {\n    'value': ninetyNineZeros,\n    'fc': 16,\n    'unitid': 3,\n    'address': 99,\n    'quantity': ninetyNineZeros.length\n}\n\nconst p3 = {\n    'value': ninetyNineZeros,\n    'fc': 16,\n    'unitid': 3,\n    'address': 40000,\n    'quantity': ninetyNineZeros.length\n}\nconst p4 = {\n    'value': ninetyNineZeros,\n    'fc': 16,\n    'unitid': 3,\n    'address': 40099,\n    'quantity': ninetyNineZeros.length\n}\n\nnode.send({payload: p1})\nnode.send({payload: p2})\nnode.send({payload: p3})\nnode.send({payload: p4})\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "7c1994c2e7b85d71",
        "type": "modbus-flex-write",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "8830ad7530d52c28",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 870,
        "y": 360,
        "wires": [
            [
                "bf938d0bc2104528"
            ],
            []
        ]
    },
    {
        "id": "868232f184e3f0f8",
        "type": "function",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "Write to Registers",
        "func": "//Eins weniger als in der Excel steht!\nconst registers = [\n    //AC Total Current value\n    //40071, 40072,\n    //AC Voltage Average Phase-to-neutral value\n    //40079, 40080,\n    //AC Power value\n    40097, 40098\n    ];\n\nmsg.inverterdata = {\n    //AC_Total_Current: msg.payload,\n    //AC_Voltage: msg.payload,\n    AC_Power: Math.abs(parseFloat(msg.payload).toFixed(2))\n}\n\nfunction tofloatregisters(value) {\n    var buf = Buffer.alloc(4);\n    buf.writeFloatBE(value);\n    return [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n}\n\nvar values = [];\n\nfor (var key of Object.keys(msg.inverterdata)) {\n    for (var val of tofloatregisters(msg.inverterdata[key])) values.push(val);\n}\n\nconst modbusmessage = {\n    'value': values,\n    'fc': 16,\n    'unitid': 3,\n    'address': registers,\n    'quantity': values.length\n}\n\nreturn ({ payload: modbusmessage })",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 240,
        "wires": [
            [
                "7c1994c2e7b85d71"
            ]
        ]
    },
    {
        "id": "bf938d0bc2104528",
        "type": "debug",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "Modbus Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 360,
        "wires": []
    },
    {
        "id": "4a056df9a0813578",
        "type": "debug",
        "z": "999bb9ea6adf3de8",
        "g": "4f9626bf34d93efb",
        "name": "Read",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 620,
        "wires": []
    },
    {
        "id": "667601978fcbee32",
        "type": "modbus-flex-getter",
        "z": "999bb9ea6adf3de8",
        "g": "4f9626bf34d93efb",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "8830ad7530d52c28",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 430,
        "y": 620,
        "wires": [
            [
                "c4b49b26f61160f1"
            ],
            []
        ]
    },
    {
        "id": "8f6413604769bda0",
        "type": "inject",
        "z": "999bb9ea6adf3de8",
        "g": "4f9626bf34d93efb",
        "name": "AC Power value",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"fc\":3,\"unitid\":3,\"address\":40097,\"quantity\":2}",
        "payloadType": "json",
        "x": 200,
        "y": 620,
        "wires": [
            [
                "667601978fcbee32"
            ]
        ]
    },
    {
        "id": "8b4fedfd403ed117",
        "type": "function",
        "z": "999bb9ea6adf3de8",
        "g": "5ba74433570b1693",
        "name": "compare first 10",
        "func": "const expectedValues = [21365, 28243, 1, 65, 18034, 28526, 26997, 29440, 0, 0]\nconst data = msg.payload\nlet result = '✅ Data matches'\nif (Array.isArray(data) == false) {\n    result = `Data Read not an array`\n} else if (data.length != expectedValues.length) {\n    result = `Data Read Length is ${data.length}. Expected ${expectedValues.length}`\n} else {\n    for (let index = 0; index < data.length; index++) {\n        const expected = expectedValues[index];\n        const readData = data[index];\n        if (expected !== readData) {\n            result = `Data at register ${40000 + index} is ${readData}. Expected ${expected}`\n            break\n        }\n    }\n}\nmsg.payload = {\n    result: result,\n    readData: data,\n    expected: expectedValues\n}\nreturn msg\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 720,
        "wires": [
            [
                "76d93db6ca65eae0"
            ]
        ]
    },
    {
        "id": "931c8bddc81bbccd",
        "type": "modbus-flex-getter",
        "z": "999bb9ea6adf3de8",
        "g": "5ba74433570b1693",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "8830ad7530d52c28",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 390,
        "y": 720,
        "wires": [
            [
                "8b4fedfd403ed117",
                "76d93db6ca65eae0"
            ],
            []
        ]
    },
    {
        "id": "76d93db6ca65eae0",
        "type": "debug",
        "z": "999bb9ea6adf3de8",
        "g": "5ba74433570b1693",
        "name": "Check",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 630,
        "y": 780,
        "wires": []
    },
    {
        "id": "4d1b9f20f495755c",
        "type": "inject",
        "z": "999bb9ea6adf3de8",
        "g": "5ba74433570b1693",
        "name": "get 440000:10",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"fc\":3,\"unitid\":3,\"address\":40000,\"quantity\":10}",
        "payloadType": "json",
        "x": 190,
        "y": 720,
        "wires": [
            [
                "931c8bddc81bbccd"
            ]
        ]
    },
    {
        "id": "c4b49b26f61160f1",
        "type": "buffer-parser",
        "z": "999bb9ea6adf3de8",
        "g": "4f9626bf34d93efb",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "floatbe",
                "name": "data",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 630,
        "y": 620,
        "wires": [
            [
                "4a056df9a0813578"
            ]
        ]
    },
    {
        "id": "989eb95978ddba44",
        "type": "http request",
        "z": "999bb9ea6adf3de8",
        "g": "362a0f5c4557595e",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://ecb1.local/api/v1/meters/1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 240,
        "wires": [
            [
                "04d1c7bccdc4cfc8",
                "37dbadd621a56daf"
            ]
        ]
    },
    {
        "id": "8830ad7530d52c28",
        "type": "modbus-client",
        "name": "ModbusClient",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "3",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    }
]
